#!/usr/bin/env node

const program = require('commander');
const readstdin = require('readstdin');

const validProperties = {
  'fontFamily': function(item, type){ 
    if(type === 'prop') {
      return 'font-family';
    } else if(type === 'value') {
      return item.style['fontFamily'];
    }
  },
  'fontWeight': function(item, type){ 
    if(type === 'prop') {
      return 'font-weight';
    } else if(type === 'value') {
      return item.style['fontWeight'];
    } 
  },
  'fontSize': function(item, type){ 
    if(type === 'prop') {
      return 'font-size';
    } else if(type === 'value') {
      return item.style['fontSize'] + 'px';
    }
  },
  'textCase': function(item, type){ 
    if(type === 'prop') {
      return 'text-transform';
    } else if(type === 'value') {
      if(item.style['textCase'] === 'UPPER') {
        return 'UPPERCASE';
      } 
      return item.style['textCase'];
    }
  }
}

/**
* format color from {r: 0, g: 0, b: 0} 
* to rgb(0, 0, 0)
*/
function formatColor(ocolor) {
  let result = 'rgb(';
  Object.keys(ocolor).forEach((key, i) => {
    if(i < 3) {
      result += `${ocolor[key] * 255}`;
      if(i < 2) 
        result += ',';
    }
  });
  result += ')';
  return result;
}

let styleTransformers = {
  'TEXT': function(css, item) {
    css += `${item.name} {\n`;
    Object.keys(item.style).forEach((key) => {
      if(validProperties[key]) {
        let prop = validProperties[key](item, 'prop'),
            value = validProperties[key](item, 'value');
        css += `\t${prop}: ${value} !important;\n`;
      }
    });
    css += `\tcolor: ${formatColor(item.fills[0].color)} !important;\n`
    css += '}\n\n';
    return css;
  },
  'VECTOR': function(css, item) {
    css += `${item.name} {\n`;
    css += `\twidth: ${item.absoluteBoundingBox.width}px !important;\n`;
    css += `\theight: ${item.absoluteBoundingBox.height}px !important;\n`;
    if(item.fills.length) {
      css += `\tbackground-color: ${formatColor(item.fills[0].color)} !important;\n`
    }
    if(item.strokes.length) {
      css += `\tborder: ${item.strokeWeight}px ${item.strokes[0].type} ${formatColor(item.strokes[0].color)};`
    }
    css += '}\n\n';
    return css;
  },
  'RECTANGLE': function(css, item) {
    css += `${item.name} {\n`;
    css += `\twidth: ${item.absoluteBoundingBox.width}px !important;\n`;
    css += `\theight: ${item.absoluteBoundingBox.height}px !important;\n`;
    if(item.fills.length) {
      css += `\tbackground-color: ${formatColor(item.fills[0].color)} !important;\n`
    }
    if(item.strokes.length) {
      css += `\tborder: ${item.strokeWeight}px ${item.strokes[0].type} ${formatColor(item.strokes[0].color)};`
    }
    css += '}\n\n';
    return css;
  }
}

let classesList = [];

/**
* append to css variable based 
* on the type of nome, creating the class 
* and styles
*/
function appendCSS(item, css) {
  if(item.type === 'TEXT' || item.type === 'VECTOR' || item.type === 'RECTANGLE') {
    if((item.name.match(/^\./) || item.name.match(/^\#/)) && 
      !classesList.find(elem => elem === item.name+item.type)){
      classesList.push(item.name+item.type);
      css = styleTransformers[item.type](css, item);
    }
  } else {
    if(item.children) {
      item.children.forEach((subitem) => {
        css = appendCSS(subitem, css); 
      });
    }
  }
  return css;
}

async function run(cmd) {
  let data = null;
  data = await readstdin(); 
  data = JSON.parse(data)['document'];
  if(!data) {
    console.error('no data was piped to the program!');
    return;
  }
  
  let css = '',
    objectName = data['name'];
  if(data['children']) {
    data['children'].forEach((item) => {
      css = appendCSS(item, css);   
    });
  }else {
    css = appendCSS(data, css);
  }

  console.log(`// ${objectName} GENERATED BY FIGMA2CSS START`)
  console.log(css);
  console.log(`// ${objectName} GENERATED BY FIGMA2CSS END`)
};

run();
