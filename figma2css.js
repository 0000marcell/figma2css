#!/usr/bin/env node

const program = require('commander');
const readstdin = require('readstdin');

const validProperties = {
  'fontFamily': { name: 'font-family', unit: '' },
  'fontWeight': { name: 'font-weight', unit: '' },
  'fontSize': { name: 'font-size', unit: 'px' },
  'textCase': { name: 'text-transform', unit: '' }
}

/**
* format color from {r: 0, g: 0, b: 0} 
* to rgb(0, 0, 0)
*/
function formatColor(ocolor) {
  let result = 'rgb(';
  Object.keys(ocolor).forEach((key, i) => {
    if(i < 3) {
      result += `${ocolor[key] * 255}`;
      if(i < 2) 
        result += ',';
    }
  });
  result += ')';
  return result;
}

let classesList = [];

/**
* append to css variable based 
* on the type of nome, creating the class 
* and styles
*/
function appendCSS(item, css) {
  if(item.type === 'TEXT') {
    if((item.name.match(/^\./) || item.name.match(/^\#/)) && 
      !classesList.find(elem => elem === item.name)){
      classesList.push(item.name);
      css += `${item.name} {\n`;
      Object.keys(item.style).forEach((key) => {
        if(validProperties[key]) {
          let prop = validProperties[key];
          css += `\t${prop.name}: ${item.style[key]}${prop.unit} !important;\n`;
        }
      });
      css += `\tcolor: ${formatColor(item.fills[0].color)} !important;\n`
      css += '}\n\n';
    }
  } else {
    if(item.children) {
      item.children.forEach((subitem) => {
        css = appendCSS(subitem, css); 
      });
    }
  }
  return css;
}

async function run(cmd) {
  let data = null;
  data = await readstdin(); 
  data = JSON.parse(data)['document'];
  if(!data) {
    console.error('no data was piped to the program!');
    return;
  }
  
  let css = '';
  if(data['children']) {
    data['children'].forEach((item) => {
      css = appendCSS(item, css);   
    });
  }else {
    css = appendCSS(data, css);
  }

  console.log('// GENERATED BY FIGMA2CSS START')
  console.log(css);
  console.log('// GENERATED BY FIGMA2CSS END')
};

run();
